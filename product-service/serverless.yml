service: product-service

frameworkVersion: "3"

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-s3-sync
  - serverless-openapi-documentation-v2

custom:
  esbuild:
    target: "node14"
  documentation: ${file(serverless.doc.yml):documentation.custom}
  openapiBucket: product-service-openapi-bucket
  s3Sync:
    - bucketName: ${self:custom.openapiBucket}
      localDir: doc/openapi
      acl: public-read

provider:
  name: aws
  runtime: nodejs14.x

  stage: dev
  region: eu-west-1

  environment:
    PRODUCTS_TABLE_NAME: AWS_Practitioner_Products
    STOCKS_TABLE_NAME: AWS_Practitioner_Stocks
    REGION: ${self:provider.region}
    SQS_URL:
      Ref: SQSQueue
    SNS_ARN:
      Ref: SNSTopic

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource:
        - "arn:aws:dynamodb:eu-west-1:508529194395:table/${self:provider.environment.PRODUCTS_TABLE_NAME}"
        - "arn:aws:dynamodb:eu-west-1:508529194395:table/${self:provider.environment.STOCKS_TABLE_NAME}"
    - Effect: "Allow"
      Action:
        - "sqs:*"
      Resource:
        - Fn::GetAtt: [SQSQueue, Arn]
    - Effect: "Allow"
      Action:
        - "sns:*"
      Resource:
        Ref: SNSTopic

functions:
  getProductsList:
    handler: handlers/getProductsList/index.getProductsList
    events:
      - http:
          path: products
          method: get
          cors: true
          documentation: ${file(serverless.doc.yml):documentation.endpoints.getProductsList}
  getProductsById:
    handler: handlers/getProductsById/index.getProductsById
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
          documentation: ${file(serverless.doc.yml):documentation.endpoints.getProductsById}
  createProduct:
    handler: handlers/createProduct/index.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true
          documentation: ${file(serverless.doc.yml):documentation.endpoints.createProduct}
  catalogBatchProcess:
    handler: handlers/catalogBatchProcess/index.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn

resources:
  Resources:
    OpenAPIBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.openapiBucket}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: dmitry_fedorov1@epam.com
        Protocol: email
        TopicArn:
          Ref: SNSTopic
    SNSSubscriptionWithFilterPolicy:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: dmitriifedoroff1@gmail.com
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          productsAdded:
           - moreThanOne
